package metismodel;
// default package
// Generated 05.09.2018 08:32:48 by Hibernate Tools 4.3.5.Final

import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Bearbeiter generated by hbm2java
 */
@Entity
@Table(name = "bearbeiter", catalog = "metis")
public class Bearbeiter implements java.io.Serializable {

	private int idBearbeiter;
	private Allelaender allelaender;
	private String kurzZeichen;
	private String passwort;
	private String anrede;
	private String vorname;
	private String name;
	private String strasse;
	private String plz;
	private String ort;
	private String bundesstaat;
	private String mail;
	private String telefon;
	private String auslastung;
	private String startseite;
	private String bemerkung;
	private Boolean bearbeiterStatus;
	private List<BearbeiterKannSprache> bearbeiterKannSpraches = new ArrayList<BearbeiterKannSprache>();
	private List<Ausfallzeit> ausfallzeits = new ArrayList<Ausfallzeit>();
	private List<Auswertungstaetigkeit> auswertungstaetigkeits = new ArrayList<Auswertungstaetigkeit>();
	private List<Dokument> dokumentsForVerantwortlicher = new ArrayList<Dokument>();
	private List<Dokument> dokumentsForAuswerter = new ArrayList<Dokument>();
	private List<Konferenzreihe> konferenzreihes = new ArrayList<Konferenzreihe>();
	private List<Periodika> periodikas = new ArrayList<Periodika>();
	private List<Klassifikation> klassifikations = new ArrayList<Klassifikation>();
	private List<Rolle> rolles = new ArrayList<Rolle>();
	private List<Protokoll> protokolls = new ArrayList<Protokoll>();
	private List<Konferenzwiedervorlage> konferenzwiedervorlages = new ArrayList<Konferenzwiedervorlage>();
	private List<Benachrichtigung> benachrichtigungsForAdressat = new ArrayList<Benachrichtigung>();
	private List<Benachrichtigung> benachrichtigungsForAutor = new ArrayList<Benachrichtigung>();
	private List<Quelle> quelles = new ArrayList<Quelle>();
	private List<Wiedervorlage> wiedervorlages = new ArrayList<Wiedervorlage>();

	public Bearbeiter() {
	}

	public Bearbeiter(Allelaender allelaender, String kurzZeichen, String passwort, String anrede, String vorname,
			String name, String strasse, String plz, String ort, String bundesstaat, String mail, String telefon,
			String auslastung, String startseite, String bemerkung, Boolean bearbeiterStatus,
			List<BearbeiterKannSprache> bearbeiterKannSpraches, List<Ausfallzeit> ausfallzeits,
			List<Auswertungstaetigkeit> auswertungstaetigkeits, List<Dokument> dokumentsForVerantwortlicher,
			List<Dokument> dokumentsForAuswerter, List<Konferenzreihe> konferenzreihes, List<Periodika> periodikas,
			List<Klassifikation> klassifikations, List<Rolle> rolles, List<Protokoll> protokolls,
			List<Konferenzwiedervorlage> konferenzwiedervorlages, List<Benachrichtigung> benachrichtigungsForAdressat,
			List<Benachrichtigung> benachrichtigungsForAutor, List<Quelle> quelles, List<Wiedervorlage> wiedervorlages) {
		this.allelaender = allelaender;
		this.kurzZeichen = kurzZeichen;
		this.passwort = passwort;
		this.anrede = anrede;
		this.vorname = vorname;
		this.name = name;
		this.strasse = strasse;
		this.plz = plz;
		this.ort = ort;
		this.bundesstaat = bundesstaat;
		this.mail = mail;
		this.telefon = telefon;
		this.auslastung = auslastung;
		this.startseite = startseite;
		this.bemerkung = bemerkung;
		this.bearbeiterStatus = bearbeiterStatus;
		this.bearbeiterKannSpraches = bearbeiterKannSpraches;
		this.ausfallzeits = ausfallzeits;
		this.auswertungstaetigkeits = auswertungstaetigkeits;
		this.dokumentsForVerantwortlicher = dokumentsForVerantwortlicher;
		this.dokumentsForAuswerter = dokumentsForAuswerter;
		this.konferenzreihes = konferenzreihes;
		this.periodikas = periodikas;
		this.klassifikations = klassifikations;
		this.rolles = rolles;
		this.protokolls = protokolls;
		this.konferenzwiedervorlages = konferenzwiedervorlages;
		this.benachrichtigungsForAdressat = benachrichtigungsForAdressat;
		this.benachrichtigungsForAutor = benachrichtigungsForAutor;
		this.quelles = quelles;
		this.wiedervorlages = wiedervorlages;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "idbearbeiter", unique = true, nullable = false)
	public int getIdBearbeiter() {
		return this.idBearbeiter;
	}

	public void setIdBearbeiter(int idBearbeiter) {
		this.idBearbeiter = idBearbeiter;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "landcode")
	public Allelaender getAllelaender() {
		return this.allelaender;
	}

	public void setAllelaender(Allelaender allelaender) {
		this.allelaender = allelaender;
	}

	@Column(name = "Kurzzeichen", length = 10)
	public String getKurzZeichen() {
		return this.kurzZeichen;
	}

	public void setKurzZeichen(String kurzZeichen) {
		this.kurzZeichen = kurzZeichen;
	}

	@Column(name = "Passwort")
	public String getPasswort() {
		return this.passwort;
	}

	public void setPasswort(String passwort) {
		this.passwort = passwort;
	}

	@Column(name = "Anrede", length = 25)
	public String getAnrede() {
		return this.anrede;
	}

	public void setAnrede(String anrede) {
		this.anrede = anrede;
	}

	@Column(name = "Vorname", length = 45)
	public String getVorname() {
		return this.vorname;
	}

	public void setVorname(String vorname) {
		this.vorname = vorname;
	}

	@Column(name = "Name", length = 45)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "Strasse", length = 45)
	public String getStrasse() {
		return this.strasse;
	}

	public void setStrasse(String strasse) {
		this.strasse = strasse;
	}

	@Column(name = "PLZ", length = 45)
	public String getPlz() {
		return this.plz;
	}

	public void setPlz(String plz) {
		this.plz = plz;
	}

	@Column(name = "Ort", length = 45)
	public String getOrt() {
		return this.ort;
	}

	public void setOrt(String ort) {
		this.ort = ort;
	}

	@Column(name = "Bundesstaat")
	public String getBundesstaat() {
		return this.bundesstaat;
	}

	public void setBundesstaat(String bundesstaat) {
		this.bundesstaat = bundesstaat;
	}

	@Column(name = "mail", length = 45)
	public String getMail() {
		return this.mail;
	}

	public void setMail(String mail) {
		this.mail = mail;
	}

	@Column(name = "Telefon", length = 45)
	public String getTelefon() {
		return this.telefon;
	}

	public void setTelefon(String telefon) {
		this.telefon = telefon;
	}

	@Column(name = "Auslastung", length = 45)
	public String getAuslastung() {
		return this.auslastung;
	}

	public void setAuslastung(String auslastung) {
		this.auslastung = auslastung;
	}

	@Column(name = "Startseite")
	public String getStartseite() {
		return this.startseite;
	}

	public void setStartseite(String startseite) {
		this.startseite = startseite;
	}

	@Column(name = "Bemerkung")
	public String getBemerkung() {
		return this.bemerkung;
	}

	public void setBemerkung(String bemerkung) {
		this.bemerkung = bemerkung;
	}

	@Column(name = "Bearbeiterstatus")
	public Boolean getBearbeiterStatus() {
		return this.bearbeiterStatus;
	}

	public void setBearbeiterStatus(Boolean bearbeiterStatus) {
		this.bearbeiterStatus = bearbeiterStatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bearbeiter")
	public List<BearbeiterKannSprache> getBearbeiterKannSpraches() {
		return this.bearbeiterKannSpraches;
	}

	public void setBearbeiterKannSpraches(List<BearbeiterKannSprache> bearbeiterKannSpraches) {
		this.bearbeiterKannSpraches = bearbeiterKannSpraches;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bearbeiter")
	public List<Ausfallzeit> getAusfallzeits() {
		return this.ausfallzeits;
	}

	public void setAusfallzeits(List<Ausfallzeit> ausfallzeits) {
		this.ausfallzeits = ausfallzeits;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "bearbeiter_darf_auswertungstaetigkeit", catalog = "metis", joinColumns = {
			@JoinColumn(name = "bearbeiter_idbearbeiter", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "auswertungstaetigkeit_idaauswertungstaetigkeit", nullable = false, updatable = false) })
	public List<Auswertungstaetigkeit> getAuswertungstaetigkeits() {
		return this.auswertungstaetigkeits;
	}

	public void setAuswertungstaetigkeits(List<Auswertungstaetigkeit> auswertungstaetigkeits) {
		this.auswertungstaetigkeits = auswertungstaetigkeits;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bearbeiterByVerantwortlicher")
	public List<Dokument> getDokumentsForVerantwortlicher() {
		return this.dokumentsForVerantwortlicher;
	}

	public void setDokumentsForVerantwortlicher(List<Dokument> dokumentsForVerantwortlicher) {
		this.dokumentsForVerantwortlicher = dokumentsForVerantwortlicher;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bearbeiterByAuswerter")
	public List<Dokument> getDokumentsForAuswerter() {
		return this.dokumentsForAuswerter;
	}

	public void setDokumentsForAuswerter(List<Dokument> dokumentsForAuswerter) {
		this.dokumentsForAuswerter = dokumentsForAuswerter;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bearbeiter")
	public List<Konferenzreihe> getKonferenzreihes() {
		return this.konferenzreihes;
	}

	public void setKonferenzreihes(List<Konferenzreihe> konferenzreihes) {
		this.konferenzreihes = konferenzreihes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bearbeiter")
	public List<Periodika> getPeriodikas() {
		return this.periodikas;
	}

	public void setPeriodikas(List<Periodika> periodikas) {
		this.periodikas = periodikas;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "bearbeiter_kennt_klassifikation", catalog = "metis", joinColumns = {
			@JoinColumn(name = "bearbeiter_idbearbeiter", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "klassifikation_idklassifikation", nullable = false, updatable = false) })
	public List<Klassifikation> getKlassifikations() {
		return this.klassifikations;
	}

	public void setKlassifikations(List<Klassifikation> klassifikations) {
		this.klassifikations = klassifikations;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "bearbeiter_hat_rolle", catalog = "metis", joinColumns = {
			@JoinColumn(name = "Bearbeiter_idbearbeiter", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "Rolle_idrolle", nullable = false, updatable = false) })
	public List<Rolle> getRolles() {
		return this.rolles;
	}

	public void setRolles(List<Rolle> rolles) {
		this.rolles = rolles;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bearbeiter")
	public List<Protokoll> getProtokolls() {
		return this.protokolls;
	}

	public void setProtokolls(List<Protokoll> protokolls) {
		this.protokolls = protokolls;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bearbeiter")
	public List<Konferenzwiedervorlage> getKonferenzwiedervorlages() {
		return this.konferenzwiedervorlages;
	}

	public void setKonferenzwiedervorlages(List<Konferenzwiedervorlage> konferenzwiedervorlages) {
		this.konferenzwiedervorlages = konferenzwiedervorlages;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bearbeiterByAdressat")
	public List<Benachrichtigung> getBenachrichtigungsForAdressat() {
		return this.benachrichtigungsForAdressat;
	}

	public void setBenachrichtigungsForAdressat(List<Benachrichtigung> benachrichtigungsForAdressat) {
		this.benachrichtigungsForAdressat = benachrichtigungsForAdressat;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bearbeiterByAutor")
	public List<Benachrichtigung> getBenachrichtigungsForAutor() {
		return this.benachrichtigungsForAutor;
	}

	public void setBenachrichtigungsForAutor(List<Benachrichtigung> benachrichtigungsForAutor) {
		this.benachrichtigungsForAutor = benachrichtigungsForAutor;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bearbeiter")
	public List<Quelle> getQuelles() {
		return this.quelles;
	}

	public void setQuelles(List<Quelle> quelles) {
		this.quelles = quelles;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bearbeiter")
	public List<Wiedervorlage> getWiedervorlages() {
		return this.wiedervorlages;
	}

	public void setWiedervorlages(List<Wiedervorlage> wiedervorlages) {
		this.wiedervorlages = wiedervorlages;
	}

	@Override
	public String toString() {
		return "Bearbeiter [idBearbeiter=" + idBearbeiter + ", allelaender=" + allelaender + ", kurzZeichen="
				+ kurzZeichen + ", passwort=" + passwort + ", anrede=" + anrede + ", vorname=" + vorname + ", name="
				+ name + ", strasse=" + strasse + ", plz=" + plz + ", ort=" + ort + ", bundesstaat=" + bundesstaat
				+ ", mail=" + mail + ", telefon=" + telefon + ", auslastung=" + auslastung + ", startseite="
				+ startseite + ", bemerkung=" + bemerkung + ", bearbeiterStatus=" + bearbeiterStatus
				+ ", bearbeiterKannSpraches=" + bearbeiterKannSpraches + ", ausfallzeits=" + ausfallzeits
				+ ", auswertungstaetigkeits=" + auswertungstaetigkeits + ", dokumentsForVerantwortlicher="
				+ dokumentsForVerantwortlicher + ", dokumentsForAuswerter=" + dokumentsForAuswerter
				+ ", konferenzreihes=" + konferenzreihes + ", periodikas=" + periodikas + ", klassifikations="
				+ klassifikations + ", rolles=" + rolles + ", protokolls=" + protokolls + ", konferenzwiedervorlages="
				+ konferenzwiedervorlages + ", benachrichtigungsForAdressat=" + benachrichtigungsForAdressat
				+ ", benachrichtigungsForAutor=" + benachrichtigungsForAutor + ", quelles=" + quelles
				+ ", wiedervorlages=" + wiedervorlages + "]";
	}
	
	
	

}
