package metismodel;
// default package
// Generated 05.09.2018 08:32:48 by Hibernate Tools 4.3.5.Final

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Konferenzreihe generated by hbm2java
 */
@Entity
@Table(name = "konferenzreihe", catalog = "metis")
public class Konferenzreihe implements java.io.Serializable {

	private KonferenzreiheId id;
	private Bearbeiter bearbeiter;
	private Boolean aktuelleVersion;
	private Boolean auszuwerten;
	private Date von;
	private Date bis;
	private String kurzname;
	private String konferenzname;
	private int sequenz;
	private String url;
	private String bezug;
	private String tibsignatur;
	private String bemerkung;
	private List<Konferenzereignis> konferenzereignises = new ArrayList<Konferenzereignis>();
	private List<Benachrichtigung> benachrichtigungs = new ArrayList<Benachrichtigung>();
	private List<Fachdatenbank> fachdatenbanks = new ArrayList<Fachdatenbank>();
	private List<Protokoll> protokolls = new ArrayList<Protokoll>();
	private List<Konferenzwiedervorlage> konferenzwiedervorlages = new ArrayList<Konferenzwiedervorlage>();
	private List<Periodika> periodikas = new ArrayList<Periodika>();

	public Konferenzreihe() {
	}

	public Konferenzreihe(KonferenzreiheId id) {
		this.id = id;
	}

	public Konferenzreihe(KonferenzreiheId id, Bearbeiter bearbeiter, Boolean aktuelleVersion, Boolean auszuwerten,
			Date von, Date bis, String kurzname, String konferenzname, int sequenz, String url, String bezug,
			String tibsignatur, String bemerkung, List<Konferenzereignis> konferenzereignises,
			List<Benachrichtigung> benachrichtigungs, List<Fachdatenbank> fachdatenbanks, List<Protokoll> protokolls,
			List<Konferenzwiedervorlage> konferenzwiedervorlages, List<Periodika> periodikas) {
		this.id = id;
		this.bearbeiter = bearbeiter;
		this.aktuelleVersion = aktuelleVersion;
		this.auszuwerten = auszuwerten;
		this.von = von;
		this.bis = bis;
		this.kurzname = kurzname;
		this.konferenzname = konferenzname;
		this.sequenz = sequenz;
		this.url = url;
		this.bezug = bezug;
		this.tibsignatur = tibsignatur;
		this.bemerkung = bemerkung;
		this.konferenzereignises = konferenzereignises;
		this.benachrichtigungs = benachrichtigungs;
		this.fachdatenbanks = fachdatenbanks;
		this.protokolls = protokolls;
		this.konferenzwiedervorlages = konferenzwiedervorlages;
		this.periodikas = periodikas;
	}

	@EmbeddedId

	@AttributeOverrides({
			@AttributeOverride(name = "idKonferenz", column = @Column(name = "idkonferenz", nullable = false)),
			@AttributeOverride(name = "version", column = @Column(name = "Version", nullable = false)) })
	public KonferenzreiheId getId() {
		return this.id;
	}

	public void setId(KonferenzreiheId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Verantwortlicher")
	public Bearbeiter getBearbeiter() {
		return this.bearbeiter;
	}

	public void setBearbeiter(Bearbeiter bearbeiter) {
		this.bearbeiter = bearbeiter;
	}

	@Column(name = "aktuelleversion")
	public Boolean getAktuelleVersion() {
		return this.aktuelleVersion;
	}

	public void setAktuelleVersion(Boolean aktuelleVersion) {
		this.aktuelleVersion = aktuelleVersion;
	}

	@Column(name = "auszuwerten")
	public Boolean getAuszuwerten() {
		return this.auszuwerten;
	}

	public void setAuszuwerten(Boolean auszuwerten) {
		this.auszuwerten = auszuwerten;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "von", length = 10)
	public Date getVon() {
		return this.von;
	}

	public void setVon(Date von) {
		this.von = von;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "bis", length = 10)
	public Date getBis() {
		return this.bis;
	}

	public void setBis(Date bis) {
		this.bis = bis;
	}

	@Column(name = "Kurzname")
	public String getKurzname() {
		return this.kurzname;
	}

	public void setKurzname(String kurzname) {
		this.kurzname = kurzname;
	}

	@Column(name = "Konferenzname")
	public String getKonferenzname() {
		return this.konferenzname;
	}

	public void setKonferenzname(String konferenzname) {
		this.konferenzname = konferenzname;
	}

	@Column(name = "Sequenz")
	public int getSequenz() {
		return this.sequenz;
	}

	public void setSequenz(int sequenz) {
		this.sequenz = sequenz;
	}

	@Column(name = "URL")
	public String getUrl() {
		return this.url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	@Column(name = "Bezug")
	public String getBezug() {
		return this.bezug;
	}

	public void setBezug(String bezug) {
		this.bezug = bezug;
	}

	@Column(name = "TIBSignatur")
	public String getTibsignatur() {
		return this.tibsignatur;
	}

	public void setTibsignatur(String tibsignatur) {
		this.tibsignatur = tibsignatur;
	}

	@Column(name = "Bemerkung")
	public String getBemerkung() {
		return this.bemerkung;
	}

	public void setBemerkung(String bemerkung) {
		this.bemerkung = bemerkung;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "konferenzreihe")
	public List<Konferenzereignis> getKonferenzereignises() {
		return this.konferenzereignises;
	}

	public void setKonferenzereignises(List<Konferenzereignis> konferenzereignises) {
		this.konferenzereignises = konferenzereignises;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "konferenzreihe")
	public List<Benachrichtigung> getBenachrichtigungs() {
		return this.benachrichtigungs;
	}

	public void setBenachrichtigungs(List<Benachrichtigung> benachrichtigungs) {
		this.benachrichtigungs = benachrichtigungs;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "konferenzreihe_hat_fachdatenbank", catalog = "metis", joinColumns = {
			@JoinColumn(name = "konferenzreihe_idkonferenz", nullable = false, updatable = false),
			@JoinColumn(name = "konferenzreihe_Version", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "fachdatenbank_idfachdatenbank", nullable = false, updatable = false) })
	public List<Fachdatenbank> getFachdatenbanks() {
		return this.fachdatenbanks;
	}

	public void setFachdatenbanks(List<Fachdatenbank> fachdatenbanks) {
		this.fachdatenbanks = fachdatenbanks;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "konferenzreihe")
	public List<Protokoll> getProtokolls() {
		return this.protokolls;
	}

	public void setProtokolls(List<Protokoll> protokolls) {
		this.protokolls = protokolls;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "konferenzreihe")
	public List<Konferenzwiedervorlage> getKonferenzwiedervorlages() {
		return this.konferenzwiedervorlages;
	}

	public void setKonferenzwiedervorlages(List<Konferenzwiedervorlage> konferenzwiedervorlages) {
		this.konferenzwiedervorlages = konferenzwiedervorlages;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "periodika_berichtetueber_konferenzreihe", catalog = "metis", joinColumns = {
			@JoinColumn(name = "konferenzreihe_idkonferenz", nullable = false, updatable = false),
			@JoinColumn(name = "konferenzreihe_Version", nullable = false, updatable = false) })
	public List<Periodika> getPeriodikas() {
		return this.periodikas;
	}

	public void setPeriodikas(List<Periodika> periodikas) {
		this.periodikas = periodikas;
	}

	@Override
	public String toString() {
		return "Konferenzreihe [id=" + id + ", bearbeiter=" + bearbeiter + ", aktuelleVersion=" + aktuelleVersion
				+ ", auszuwerten=" + auszuwerten + ", von=" + von + ", bis=" + bis + ", kurzname=" + kurzname
				+ ", konferenzname=" + konferenzname + ", sequenz=" + sequenz + ", url=" + url + ", bezug=" + bezug
				+ ", tibsignatur=" + tibsignatur + ", bemerkung=" + bemerkung + ", konferenzereignises="
				+ konferenzereignises + ", benachrichtigungs=" + benachrichtigungs + ", fachdatenbanks="
				+ fachdatenbanks + ", protokolls=" + protokolls + ", konferenzwiedervorlages=" + konferenzwiedervorlages
				+ ", periodikas=" + periodikas + "]";
	}

}
