package metis;
// default package

// Generated 05.09.2018 08:32:48 by Hibernate Tools 4.3.5.Final

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.lang.reflect.Field;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

/**
 * View2 generated by hbm2java
 */
@Entity
@Table(name = "view2", catalog = "metis")
public class View2 implements java.io.Serializable {

	@Id
	@Column(name = "idQuelle", nullable = false)
	public Integer idQuelle;

	@Column(name = "Titel")
	public String titel;

	@Column(name = "URL", length = 45)
	public String url;

	@Column(name = "Band", length = 10)
	public String band;

	@Column(name = "Heft", length = 10)
	public String heft;

	@Column(name = "Jahr")
	public Integer jahr;

	@Column(name = "TIBSignatur", length = 45)
	public String tibsignatur;

	@Column(name = "TIBStandort", length = 45)
	public String tibstandort;

	@Column(name = "Periodika_ZCode")
	public Integer periodikaZcode;

	@Column(name = "Periodika_Version")
	public Integer periodikaVersion;

	@Column(name = "PeriodikaTitelLang")
	public String periodikaTitelLang;

	@Column(name = "dokz", nullable = false)
	public long dokz;

	public View2() {

	}

	public View2(int idQuelle, String titel, String url, String band, String heft, Integer jahr, String tibsignatur,
			String tibstandort, Integer periodikaZcode, Integer periodikaVersion, String periodikaTitelLang,
			long dokz) {
		super();
		this.idQuelle = idQuelle;
		this.titel = titel;
		this.url = url;
		this.band = band;
		this.heft = heft;
		this.jahr = jahr;
		this.tibsignatur = tibsignatur;
		this.tibstandort = tibstandort;
		this.periodikaZcode = periodikaZcode;
		this.periodikaVersion = periodikaVersion;
		this.periodikaTitelLang = periodikaTitelLang;
		this.dokz = dokz;
	}

	@Override
	public String toString() {
		return "View2 [idQuelle=" + idQuelle + ", titel=" + titel + ", url=" + url + ", band=" + band + ", heft=" + heft
				+ ", jahr=" + jahr + ", tibsignatur=" + tibsignatur + ", tibstandort=" + tibstandort
				+ ", periodikaZcode=" + periodikaZcode + ", periodikaVersion=" + periodikaVersion
				+ ", periodikaTitelLang=" + periodikaTitelLang + ", dokz=" + dokz + "]";
	}

	public void modelview2ToXML(XMLOutputFactory xmlOutputFactory, int i)
			throws XMLStreamException, FileNotFoundException {

		XMLStreamWriter xMLStreamWriter = xmlOutputFactory.createXMLStreamWriter(
				new BufferedOutputStream(new FileOutputStream(new File("Dokument" + i + ".xml"))));
		xMLStreamWriter.writeStartDocument();
		xMLStreamWriter.writeStartElement("Dokument");
		String s;
		for (Field f : getClass().getDeclaredFields()) {

			s = f.getName();
			xMLStreamWriter.writeStartElement(s);

			switch (s) {

			case "idQuelle":
				xMLStreamWriter.writeCharacters(String.valueOf(this.idQuelle));
				break;
			case "titel":
				xMLStreamWriter.writeCharacters(String.valueOf(this.titel));
				break;
			case "url":
				xMLStreamWriter.writeCharacters(String.valueOf(this.url));
				break;
			case "band":
				xMLStreamWriter.writeCharacters(this.band);
				break;
			case "heft":
				xMLStreamWriter.writeCharacters(this.heft);
				break;
			case "jahr":
				xMLStreamWriter.writeCharacters(String.valueOf(this.jahr));
				break;
			case "tibsignatur":
				xMLStreamWriter.writeCharacters(this.tibsignatur);
				break;
			case "tibstandort":
				xMLStreamWriter.writeCharacters(this.tibstandort);
				break;
			case "periodikaZcode":
				xMLStreamWriter.writeCharacters(String.valueOf(this.periodikaZcode));
				break;
			case "periodikaVersion":
				xMLStreamWriter.writeCharacters(String.valueOf(this.periodikaVersion));
				break;
			case "periodikaTitelLang":
				xMLStreamWriter.writeCharacters(this.periodikaTitelLang);
				break;
			case "dokz":
				xMLStreamWriter.writeCharacters(String.valueOf(this.dokz));
				break;
			}
			xMLStreamWriter.writeEndElement();
		}
		xMLStreamWriter.writeEndElement();
		xMLStreamWriter.writeEndDocument();
		xMLStreamWriter.flush();
		xMLStreamWriter.close();
	}

}
