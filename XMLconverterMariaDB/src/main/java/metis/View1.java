package metis;
// default package
// Generated 05.09.2018 08:32:48 by Hibernate Tools 4.3.5.Final

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.lang.reflect.Field;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

import org.springframework.stereotype.Component;

/**
 * View1 generated by hbm2java
 */
@Entity
@Table(name = "view1", catalog = "metis")
public class View1 implements java.io.Serializable {
	

	@Id
	@Column(name = "ZCode", nullable = false)
	public Integer zcode;
	
	@Column(name = "Version", nullable = false)
	public Integer version;
	
	@Column(name = "aktuelleversion")
	public Boolean aktuelleVersion;
	
	@Column(name = "Titellang")
	public String titelLang;
	
	@Column(name = "URL")
	public String url;

	@Column(name = "ISSN", length = 65535)
	public String issn;
	
	@Column(name = "TIBSignatur", length = 45)
	public String tibsignatur;
	
	@Column(name = "TIBStandort", length = 45)
	public String tibstandort;
	
	@Column(name = "Printbezug")
	public Boolean printBezug;
	
	@Column(name = "auszuwerten")
	public Boolean auszuwerten;

	@Column(name = "Kostenlos")
	public Boolean kostenlos;
	
	@Column(name = "Zeitschrift")
	public Boolean zeitschrift;
	
	@Column(name = "Namekurz", length = 10)
	public String nameKurz;
	
	@Column(name = "Verlagname")
	public String verlagName;
	
	@Column(name = "idquelle", length = 65535)
	public String idQuelle;
	
	@Column(name = "Kurzzeichen", length = 10)
	public String kurzZeichen;
	
	@Column(name = "Name", length = 45)
	public String name;
	
	@Column(name = "wiedervorlage_idbearbeiter")
	public Integer wiedervorlageIdBearbeiter;

	@Column(name = "fachdbs", length = 65535)
	public String fachdbs;
	
	@Column(name = "produktionsweg", length = 65535)	
	public String produktionsweg;

	@Column(name = "Anzahlquellen", nullable = false)
	public long anzahlQuellen;

	
	public View1() {
		
	}

	public View1(int zcode, int version, Boolean aktuelleVersion, String titelLang, String url, String issn,
			String tibsignatur, String tibstandort, Boolean printBezug, Boolean auszuwerten, Boolean kostenlos,
			Boolean zeitschrift, String nameKurz, String verlagName, String idQuelle, String kurzZeichen, String name,
			Integer wiedervorlageIdBearbeiter, String fachdbs, String produktionsweg, long anzahlQuellen) {
		this.zcode = zcode;
		this.version = version;
		this.aktuelleVersion = aktuelleVersion;
		this.titelLang = titelLang;
		this.url = url;
		this.issn = issn;
		this.tibsignatur = tibsignatur;
		this.tibstandort = tibstandort;
		this.printBezug = printBezug;
		this.auszuwerten = auszuwerten;
		this.kostenlos = kostenlos;
		this.zeitschrift = zeitschrift;
		this.nameKurz = nameKurz;
		this.verlagName = verlagName;
		this.idQuelle = idQuelle;
		this.kurzZeichen = kurzZeichen;
		this.name = name;
		this.wiedervorlageIdBearbeiter = wiedervorlageIdBearbeiter;
		this.fachdbs = fachdbs;
		this.produktionsweg = produktionsweg;
		this.anzahlQuellen = anzahlQuellen;
	}


	public void modelview1ToXML(XMLOutputFactory xmlOutputFactory, int i) throws XMLStreamException, FileNotFoundException {

		XMLStreamWriter xMLStreamWriter = xmlOutputFactory
				.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(new File("Dokument" + i + ".xml"))));
		xMLStreamWriter.writeStartDocument();
		xMLStreamWriter.writeStartElement("Dokument"); // Klassenname evtl
		String s;
		for (Field f : getClass().getDeclaredFields()) {

			s = f.getName();
			xMLStreamWriter.writeStartElement(f.getName());

			switch (s) {

			case "zcode":
				xMLStreamWriter.writeCharacters(String.valueOf(this.zcode)); 
				break;
			case "version":
				xMLStreamWriter.writeCharacters(String.valueOf(this.version));
				break;
			case "aktuelleVersion":
				xMLStreamWriter.writeCharacters(String.valueOf(this.aktuelleVersion));
				break;
			case "titelLang":
				xMLStreamWriter.writeCharacters(this.titelLang);
				break;
			case "url":
				xMLStreamWriter.writeCharacters(this.url);
				break;
			case "issn":
				xMLStreamWriter.writeCharacters(this.issn);
				break;
			case "tibsignatur":
				xMLStreamWriter.writeCharacters(this.tibsignatur);
				break;
			case "tibstandort":
				xMLStreamWriter.writeCharacters(this.tibstandort);
				break;
			case "printBezug":
				xMLStreamWriter.writeCharacters(String.valueOf(this.printBezug));
				break;
			case "auszuwerten":
				xMLStreamWriter.writeCharacters(String.valueOf(this.auszuwerten));
				break;
			case "kostenlos":
				xMLStreamWriter.writeCharacters(String.valueOf(this.kostenlos));
				break;
			case "zeitschrift":
				xMLStreamWriter.writeCharacters(String.valueOf(this.zeitschrift));
				break;
			case "nameKurz":
				xMLStreamWriter.writeCharacters(this.nameKurz);
				break;
			case "verlagName":
				xMLStreamWriter.writeCharacters(this.verlagName);
				break;
			case "idQuelle":
				xMLStreamWriter.writeCharacters(this.idQuelle);
				break;
			case "kurzZeichen":
				xMLStreamWriter.writeCharacters(this.kurzZeichen);
				break;
			case "name":
				xMLStreamWriter.writeCharacters(this.name);
				break;
			case "wiedervorlageIdBearbeiter":
				xMLStreamWriter.writeCharacters(String.valueOf(this.wiedervorlageIdBearbeiter));
				break;
			case "fachdbs":
				xMLStreamWriter.writeCharacters(this.fachdbs);
				break;
			case "produktionsweg":
				xMLStreamWriter.writeCharacters(this.produktionsweg);
				break;
			case "anzahlQuellen":
				xMLStreamWriter.writeCharacters(String.valueOf(this.anzahlQuellen));
				break;
			}
			xMLStreamWriter.writeEndElement();

			
		}	xMLStreamWriter.writeEndElement();
			xMLStreamWriter.writeEndDocument();
			xMLStreamWriter.flush();
			xMLStreamWriter.close();
	}

}
