package metis;
// default package

import java.io.BufferedOutputStream;

// Generated 05.09.2018 08:32:48 by Hibernate Tools 4.3.5.Final

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

/**
 * View3 generated by hbm2java
 */
@Entity
@Table(name = "view3", catalog = "metis")
@XmlRootElement(name = "dokument")
public class View3 implements Serializable {

	@Id
	@Column(name = "iddokument", nullable = false)
	@XmlAttribute(name = "id")
	public Integer idDokument;

	@Column(name = "Doknr", length = 15)
	@XmlElement(name = "doknr")
	public String dokNr;

	@Column(name = "Status")
	@XmlElement(name = "status")
	public Integer status;

	@Column(name = "idquelle")
	@XmlElement(name = "idquelle")
	public Integer idQuelle;

	@Column(name = "vonseite", length = 45)
	@XmlElement(name = "vonSeite")
	public String vonSeite;

	@Column(name = "bisseite", length = 45)
	@XmlElement(name = "bisSeite")
	public String bisSeite;

	@Column(name = "Seiten", length = 45)
	@XmlElement(name = "seiten")
	public String seiten;

	@Column(name = "URL")
	@XmlElement(name = "url")
	public String url;

	@Column(name = "DOI")
	@XmlElement(name = "doi")
	public String doi;

	@Column(name = "iddatenlieferung")
	@XmlElement(name = "idDatenlieferung")
	public Integer idDatenlieferung;

	@Column(name = "Doktitel", length = 65535)
	@XmlElement(name = "doktitel")
	public String dokTitel;

	@Column(name = "Auswerterkurz", length = 10)
	@XmlElement(name = "auswerterKurz")
	public String auswerterKurz;

	@Column(name = "Auswertervorname", length = 45)
	@XmlElement(name = "auswerterVorname")
	public String auswerterVorname;

	@Column(name = "Auswertername", length = 45)
	@XmlElement(name = "auswerterName")
	public String auswerterName;

	@Column(name = "Taetigkeit", length = 45)
	@XmlElement(name = "taetigkeit")
	public String taetigkeit;

	@Column(name = "Fachrefkurz", length = 10)
	@XmlElement(name = "fachrefKurz")
	public String fachrefKurz;

	@Column(name = "Fachrefname", length = 45)
	@XmlElement(name = "fachrefName")
	public String fachrefName;

	@Column(name = "QTitel")
	@XmlElement(name = "qTitel")
	public String qTitel;

	@Column(name = "QExtratitel")
	@XmlElement(name = "qExtraTitel")
	public String qExtraTitel;

	@Column(name = "Band", length = 10)
	@XmlElement(name = "band")
	public String band;

	@Column(name = "Heft", length = 10)
	@XmlElement(name = "heft")
	public String heft;

	@Column(name = "Jahr")
	@XmlElement(name = "jahr")
	public Integer jahr;

	@Column(name = "ZCode")
	@XmlElement(name = "zCode")
	public Integer zCode;

	@Column(name = "Version")
	@XmlElement(name = "version")
	public Integer version;

	@Column(name = "ZTitel")
	@XmlElement(name = "zTitel")
	public String zTitel;

	@Column(name = "Dokart", length = 65535)
	@XmlElement(name = "dokArt")
	public String dokArt;

	@Column(name = "Abstract", length = 65535)
	@XmlElement(name = "abstract")
	public String Abstract;

	@Column(name = "Datum_Lieferung", length = 19)
	@XmlElement(name = "datumLieferung")
	public Date datumLieferung;

	@Column(name = "Autoren", length = 65535)
	@XmlElement(name = "autoren")
	public String autoren;

	@Column(name = "Institutionen", length = 65535)
	@XmlElement(name = "institution")
	public String institutionen;

	public View3() {
	}

	public View3(int idDokument, String dokNr, Integer status, Integer idQuelle, String vonSeite, String bisSeite,
			String seiten, String url, String doi, Integer idDatenlieferung, String dokTitel, String auswerterKurz,
			String auswerterVorname, String auswerterName, String taetigkeit, String fachrefKurz, String fachrefName,
			String qtitel, String qextraTitel, String band, String heft, Integer jahr, Integer zcode, Integer version,
			String ztitel, String dokArt, String abstract_, Date datumLieferung, String autoren, String institutionen) {

		this.idDokument = idDokument;
		this.dokNr = dokNr;
		this.status = status;
		this.idQuelle = idQuelle;
		this.vonSeite = vonSeite;
		this.bisSeite = bisSeite;
		this.seiten = seiten;
		this.url = url;
		this.doi = doi;
		this.idDatenlieferung = idDatenlieferung;
		this.dokTitel = dokTitel;
		this.auswerterKurz = auswerterKurz;
		this.auswerterVorname = auswerterVorname;
		this.auswerterName = auswerterName;
		this.taetigkeit = taetigkeit;
		this.fachrefKurz = fachrefKurz;
		this.fachrefName = fachrefName;
		this.qTitel = qtitel;
		this.qExtraTitel = qextraTitel;
		this.band = band;
		this.heft = heft;
		this.jahr = jahr;
		this.zCode = zcode;
		this.version = version;
		this.zTitel = ztitel;
		this.dokArt = dokArt;
		this.Abstract = abstract_;
		this.datumLieferung = datumLieferung;
		this.autoren = autoren;
		this.institutionen = institutionen;
	}

	@Override
	public String toString() {
		return "View3 [idDokument=" + idDokument + ", dokNr=" + dokNr + ", status=" + status + ", idQuelle=" + idQuelle
				+ ", vonSeite=" + vonSeite + ", bisSeite=" + bisSeite + ", seiten=" + seiten + ", url=" + url + ", doi="
				+ doi + ", idDatenlieferung=" + idDatenlieferung + ", dokTitel=" + dokTitel + ", auswerterKurz="
				+ auswerterKurz + ", auswerterVorname=" + auswerterVorname + ", auswerterName=" + auswerterName
				+ ", taetigkeit=" + taetigkeit + ", fachrefKurz=" + fachrefKurz + ", fachrefName=" + fachrefName
				+ ", qtitel=" + qTitel + ", qextraTitel=" + qExtraTitel + ", band=" + band + ", heft=" + heft
				+ ", jahr=" + jahr + ", zcode=" + zCode + ", version=" + version + ", ztitel=" + zTitel + ", dokArt="
				+ dokArt + ", abstract_=" + Abstract + ", datumLieferung=" + datumLieferung + ", autoren=" + autoren
				+ ", institutionen=" + institutionen + "]";
	}

	public void modelview3ToXML(XMLOutputFactory xmlOutputFactory, int i)
			throws XMLStreamException, FileNotFoundException {

		XMLStreamWriter xMLStreamWriter = xmlOutputFactory.createXMLStreamWriter(
				new BufferedOutputStream(new FileOutputStream(new File("Dokument" + i + ".xml"))));
		xMLStreamWriter.writeStartDocument();
		xMLStreamWriter.writeStartElement("Dokument"); // Klassenname evtl
		String s;
		for (Field f : getClass().getDeclaredFields()) {

			s = f.getName();
			xMLStreamWriter.writeStartElement(f.getName());

			switch (s) {

			case "dokNr":
				xMLStreamWriter.writeCharacters(String.valueOf(this.dokNr));
				break;
			case "status":
				xMLStreamWriter.writeCharacters(String.valueOf(this.status));
				break;
			case "idQuelle":
				xMLStreamWriter.writeCharacters(String.valueOf(this.idQuelle));
				break;
			case "vonSeite":
				xMLStreamWriter.writeCharacters(this.vonSeite);
				break;
			case "bisSeite":
				xMLStreamWriter.writeCharacters(this.bisSeite);
				break;
			case "seiten":
				xMLStreamWriter.writeCharacters(this.seiten);
				break;
			case "url":
				xMLStreamWriter.writeCharacters(this.url);
				break;
			case "doi":
				xMLStreamWriter.writeCharacters(this.doi);
				break;
			case "idDatenlieferung":
				xMLStreamWriter.writeCharacters(String.valueOf(this.idDatenlieferung));
				break;
			case "dokTitel":
				xMLStreamWriter.writeCharacters(this.dokTitel);
				break;
			case "auswerterKurz":
				xMLStreamWriter.writeCharacters(this.auswerterKurz);
				break;
			case "auswerterVorname":
				xMLStreamWriter.writeCharacters(this.auswerterVorname);
				break;
			case "auswerterName":
				xMLStreamWriter.writeCharacters(this.auswerterName);
				break;
			case "taetigkeit":
				xMLStreamWriter.writeCharacters(this.taetigkeit);
				break;
			case "fachrefKurz":
				xMLStreamWriter.writeCharacters(this.fachrefKurz);
				break;
			case "fachrefName":
				xMLStreamWriter.writeCharacters(this.fachrefName);
				break;
			case "qTitel":
				xMLStreamWriter.writeCharacters(this.qTitel);
				break;
			case "qExtraTitel":
				xMLStreamWriter.writeCharacters(this.qExtraTitel);
				break;
			case "band":
				xMLStreamWriter.writeCharacters(this.band);
				break;
			case "heft":
				xMLStreamWriter.writeCharacters(this.heft);
				break;
			case "jahr":
				xMLStreamWriter.writeCharacters(String.valueOf(this.jahr));
				break;
			case "zCode":
				xMLStreamWriter.writeCharacters(String.valueOf(this.zCode));
				break;
			case "version":
				xMLStreamWriter.writeCharacters(String.valueOf(this.version));
				break;
			case "zTitel":
				xMLStreamWriter.writeCharacters(this.zTitel);
				break;
			case "dokArt":
				xMLStreamWriter.writeCharacters(this.dokArt);
				break;
			case "Abstract":
				xMLStreamWriter.writeCharacters(this.Abstract);
				break;
			case "datumLieferung":
				DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");
				String strDate = "";
				if (this.datumLieferung == null)
					xMLStreamWriter.writeCharacters("");
				else {
					strDate = dateFormat.format(this.datumLieferung);
					xMLStreamWriter.writeCharacters(strDate);
				}
				break;
			case "autoren":
				xMLStreamWriter.writeCharacters(this.autoren);
				break;
			case "institutionen":
				xMLStreamWriter.writeCharacters(this.institutionen);
				break;
			}
			xMLStreamWriter.writeEndElement();
		}
		xMLStreamWriter.writeEndElement();
		xMLStreamWriter.writeEndDocument();
		xMLStreamWriter.flush();
		xMLStreamWriter.close();
	}
}
