package metisimport;
// default package

// Generated 06.09.2018 13:31:39 by Hibernate Tools 4.3.5.Final

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

import org.springframework.stereotype.Component;

/**
 * View2 generated by hbm2java
 */
@Entity
@XmlRootElement(name = "dokument")
@Table(name = "view2", catalog = "metisimport")
public class View2 implements Serializable {

	@Id
	@Column(name = "iddokumentimport", nullable = false)
	@XmlElement(name = "idDokumentImport")
	public Integer idDokumentImport;

	@Column(name = "ZTitel")
	@XmlElement(name = "ZTitel")
	public String ztitel;

	@Column(name = "Jahr", length = 10)
	@XmlElement(name = "Jahr")
	public String jahr;

	@Column(name = "Kurzzeichen", length = 10)
	@XmlElement(name = "KurzZeichen")
	public String kurzZeichen;

	@Column(name = "Name", length = 45)
	@XmlElement(name = "Name")
	public String name;

	@Column(name = "statuswert")
	@XmlElement(name = "statuswert")
	public Integer statuswert;

	@Column(name = "Bedeutung")
	@XmlElement(name = "Bedeutung")
	public String bedeutung;

	@Column(name = "iddatenlieferung", nullable = false)
	@XmlElement(name = "idDatenlieferung")
	public Integer idDatenlieferung;

	@Column(name = "importiert_zeitstempel", length = 19)
	@XmlElement(name = "importiert_zeitstempel")
	public Date importiertZeitstempel;

	@Column(name = "Band", length = 10)
	@XmlElement(name = "Band")
	public String band;

	@Column(name = "Heft", length = 10)
	@XmlElement(name = "Heft")
	public String heft;

	@Column(name = "QTitel")
	@XmlElement(name = "QTitel")
	public String qtitel;

	@Column(name = "Lieferantnamekurz", length = 50)
	@XmlElement(name = "LieferantNameKurz")
	public String lieferantNameKurz;

	@Column(name = "Doktitel", length = 16777215)
	@XmlElement(name = "Doktitel")
	public String doktitel;

	public View2() {
	}

	public View2(int idDokumentImport, String ztitel, String jahr, String kurzZeichen, String name, Integer statuswert,
			String bedeutung, int idDatenlieferung, Date importiertZeitstempel, String band, String heft, String qtitel,
			String lieferantNameKurz, String doktitel) {
		this.idDokumentImport = idDokumentImport;
		this.ztitel = ztitel;
		this.jahr = jahr;
		this.kurzZeichen = kurzZeichen;
		this.name = name;
		this.statuswert = statuswert;
		this.bedeutung = bedeutung;
		this.idDatenlieferung = idDatenlieferung;
		this.importiertZeitstempel = importiertZeitstempel;
		this.band = band;
		this.heft = heft;
		this.qtitel = qtitel;
		this.lieferantNameKurz = lieferantNameKurz;
		this.doktitel = doktitel;
	}

	public void Importview2ToXML(XMLOutputFactory xmlOutputFactory, int i) throws XMLStreamException, FileNotFoundException {

		XMLStreamWriter xMLStreamWriter = xmlOutputFactory.createXMLStreamWriter(
				new BufferedOutputStream(new FileOutputStream(new File("Dokument" + i + ".xml"))));
		xMLStreamWriter.writeStartDocument();
		xMLStreamWriter.writeStartElement("Dokument"); // Klassenname evtl

		String s;
		for (Field f : getClass().getDeclaredFields()) {

			s = f.getName();
			xMLStreamWriter.writeStartElement(s);

			switch (s) {

			case "idDokumentImport":
				xMLStreamWriter.writeCharacters(String.valueOf(this.idDokumentImport)); // Wert des Attributs
				break;
			case "ztitel":
				xMLStreamWriter.writeCharacters(this.ztitel); // Wert des Attributs
				break;
			case "jahr":
				xMLStreamWriter.writeCharacters(this.jahr);
				break;
			case "kurzZeichen":
				xMLStreamWriter.writeCharacters(this.kurzZeichen);
				break;
			case "name":
				xMLStreamWriter.writeCharacters(this.name);
				break;
			case "statuswert":
				xMLStreamWriter.writeCharacters(String.valueOf(this.statuswert));
				break;
			case "bedeutung":
				xMLStreamWriter.writeCharacters(this.bedeutung);
				break;
			case "idDatenlieferung":
				xMLStreamWriter.writeCharacters(String.valueOf(this.idDatenlieferung));
				break;
			case "importiertZeitstempel":
				DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");
				String strDate = "";
				if (this.importiertZeitstempel == null)
					xMLStreamWriter.writeCharacters("");
				else {
					strDate = dateFormat.format(this.importiertZeitstempel);
					xMLStreamWriter.writeCharacters(strDate);
				}
				break;
			case "band":
				xMLStreamWriter.writeCharacters(this.band);
				break;
			case "heft":
				xMLStreamWriter.writeCharacters(this.heft);
				break;
			case "qtitel":
				xMLStreamWriter.writeCharacters(this.qtitel);
				break;
			case "lieferantNameKurz":
				xMLStreamWriter.writeCharacters(this.lieferantNameKurz);
				break;
			case "doktitel":
				xMLStreamWriter.writeCharacters(this.doktitel);
				break;
			}
			xMLStreamWriter.writeEndElement();
		}
		xMLStreamWriter.writeEndElement();
		xMLStreamWriter.writeEndDocument();
		xMLStreamWriter.flush();
		xMLStreamWriter.close();
	}
}