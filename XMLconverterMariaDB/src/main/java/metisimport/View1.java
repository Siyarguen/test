package metisimport;
// default package

import java.io.BufferedOutputStream;

// Generated 06.09.2018 13:31:39 by Hibernate Tools 4.3.5.Final

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.lang.reflect.Field;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

/**
 * View1 generated by hbm2java
 */
@Entity
@XmlRootElement(name = "dokument")
@Table(name = "view1", catalog = "metisimport")
public class View1 implements java.io.Serializable {

	@Id
	@Column(name = "iddokfeld", nullable = false)
	@XmlElement(name = "idDokFeld")
	public Integer idDokFeld;

	@Column(name = "dokumentimport_iddokumentimport", nullable = false)
	@XmlElement(name = "dokumentimport_idDokumentImport")
	public Integer dokumentimportIdDokumentImport;

	@Column(name = "feldtyp_idfeldtyp", nullable = false)
	@XmlElement(name = "FeldtypIdFeldTyp")
	public Integer feldtypIdFeldTyp;

	@Column(name = "Feldinhalt", length = 16777215)
	@XmlElement(name = "Feldinhalt")
	public String feldinhalt;

	@Column(name = "Sortierung")
	@XmlElement(name = "Sortierung")
	public Integer sortierung;

	public View1() {

	}

	public View1(int idDokFeld, int dokumentimportIdDokumentImport, int feldtypIdFeldTyp, String feldinhalt,
			Integer sortierung) {
		this.idDokFeld = idDokFeld;
		this.dokumentimportIdDokumentImport = dokumentimportIdDokumentImport;
		this.feldtypIdFeldTyp = feldtypIdFeldTyp;
		this.feldinhalt = feldinhalt;
		this.sortierung = sortierung;

	}

	public void Importview1ToXML(XMLOutputFactory xmlOutputFactory,int i) throws XMLStreamException, FileNotFoundException {

		XMLStreamWriter xMLStreamWriter = xmlOutputFactory
				.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(new File("Dokument" + i + ".xml"))));
		xMLStreamWriter.writeStartDocument();
		xMLStreamWriter.writeStartElement("Dokument"); // Klassenname evtl

		String s;
		for (Field f : getClass().getDeclaredFields()) {

			s = f.getName();

			xMLStreamWriter.writeStartElement(f.getName());

			switch (s) {
			case "idDokFeld":
				xMLStreamWriter.writeCharacters(String.valueOf(this.idDokFeld));
				break;
			case "dokumentimportIdDokumentImport":
				xMLStreamWriter.writeCharacters(String.valueOf(this.dokumentimportIdDokumentImport));
				break;
			case "feldtypIdFeldTyp":
				xMLStreamWriter.writeCharacters(String.valueOf(this.feldtypIdFeldTyp));
				break;
			case "feldinhalt":
				xMLStreamWriter.writeCharacters(this.feldinhalt);
				break;
			case "sortierung":
				xMLStreamWriter.writeCharacters(String.valueOf(this.sortierung));
				break;
			}
			xMLStreamWriter.writeEndElement();
		}
		xMLStreamWriter.writeEndElement();
		xMLStreamWriter.writeEndDocument();
		xMLStreamWriter.flush();
		xMLStreamWriter.close();
	}
}
